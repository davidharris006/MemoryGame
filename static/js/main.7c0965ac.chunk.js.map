{"version":3,"sources":["logo.svg","components/topbar.js","components/instruction.js","components/card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Topbar","props","react_default","a","createElement","class","score","topscore","Instructions","id","Card","className","src","clicked","alt","onClick","App","state","tiles","customData","idclicked","resetGame","alert","_this","setState","Object","objectSpread","clickOnCard","_ref","target","newerArray","includes","map","tile","sort","b","Math","random","concat","toConsumableArray","_this2","this","topbar","instruction","card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c0965ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction Topbar(props) {\r\n    return (\r\n    <div class=\"container-fluid\">\r\n        <nav class=\"navbar navbar-expand-lg navbar-light bg-light col-12\">\r\n        \r\n        <p class=\"logo\">Clicky Game</p> \r\n        <div class=\"col-md\"></div>\r\n        <p class=\"statustext\">test</p>\r\n        <div class=\"col-md\">\r\n        </div>\r\n        <div class=\"col-md\">\r\n        <p class=\"score\">Score: {props.score} | Top Score: {props.topscore}</p>\r\n        </div>\r\n        \r\n        </nav>\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Topbar;","import React from \"react\";\r\n\r\nfunction Instructions(props) {\r\n    return (\r\n    <div id=\"instructiondiv\" class=\"container-fluid\">\r\n        <div class=\"jumbotorn col-lg-12\" id=\"instructions\">\r\n\r\n    <div id=\"clickytext\"> \r\n        <h1>CLICKY GAME!!!</h1>\r\n    </div>\r\n\r\n    <div id=\"instrucitontext\">\r\n            <h2>Click an image to get points,</h2><h2> but dont click any images that you already clicked.</h2>\r\n    </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Instructions;","import React from \"react\";\r\n\r\n\r\n\r\nfunction Card(props) {\r\n\r\n    return (\r\n        <div className=\"cards col-lg-3\">\r\n\r\n            <img className=\"cardimg\" id={props.id}  src={props.src} clicked={props.clicked} alt='Game PICTURE' onClick={props.onClick} />\r\n\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Card;","import React, { Component } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Topbar from './components/topbar'\nimport Instructions from './components/instruction'\nimport Card from \"./components/card\"\nimport customData from \"./data.json\"\n\n\nclass App extends Component {\n\n  state = {\n    tiles: customData,\n    topscore: 0,\n    score: 0,\n    idclicked: []\n}\n\nresetGame = () => {\n  alert(\"YOU LOST TRY AGAIN PLEASE!\")\n  this.setState({\n   ...this.state,\n    tiles: customData,\n    score: 0,\n    idclicked: []\n  })\n}\n\nclickOnCard = ({target: { id }}) => {\nlet newerArray = []\n  if(this.state.idclicked.includes(id) === false) {\n    newerArray = this.state.tiles.map((tile)=>{\n      return tile\n    })\n    newerArray.sort(function(a, b){return 0.5 - Math.random()})\n    this.setState({\n      ...this.state,\n      score: this.state.score + 1,\n      topscore: this.state.score === this.state.topscore ? this.state.topscore + 1 : this.state.topscore,\n      tiles: newerArray,\n      idclicked: [...this.state.idclicked, id]\n    })\n    \n    \n\n }\n else {\n   this.resetGame()\n }\n}\n\n\nrender() {\n  return (\n    <div className=\"App app\">\n      <Topbar score={this.state.score} topscore={this.state.topscore}/>  \n      <Instructions />\n      <div> \n             <div className=\"container-fluid\" id=\"card-container\">\n        \n                <div className=\"row\">\n\n{ this.state.tiles.map((tile)=> \n    \n    \n    \n    <Card id={tile.id} clicked= {tile.clicked} src={tile.src}  onClick={this.clickOnCard}/>\n    )\n}\n\n</div>\n    \n              \n                 \n    </div>\n   \n   \n</div>\n   \n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}